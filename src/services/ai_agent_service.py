"""
AI Agent service for the Knowledge Graph Social Network System
"""
import json
import os
import uuid
import secrets
from typing import Dict, List, Optional, Any
from datetime import datetime

from src.models.ai_agent import AIAgent, AIAgentCreate, AIAgentUpdate, AIAgentInDB, AgentStatus, AgentSpecialization
from src.services.knowledge_graph import KnowledgeGraphService
from src.services.openai_service import OpenAIService

class AIAgentService:
    """Service for managing AI agents"""
    
    def __init__(self, knowledge_graph_service: KnowledgeGraphService):
        """Initialize the AI agent service"""
        self.knowledge_graph_service = knowledge_graph_service
        self.agents: Dict[str, AIAgentInDB] = {}
        self.openai_service = OpenAIService()
        self._load_agents()
    
    def _load_agents(self) -> Dict[str, AIAgentInDB]:
        """Load AI agents from the data file"""
        try:
            data_dir = os.path.join(os.path.dirname(os.path.dirname(__file__)), "data")
            os.makedirs(data_dir, exist_ok=True)
            
            agents_file = os.path.join(data_dir, "ai_agents.json")
            
            if not os.path.exists(agents_file):
                # Create default agents if file doesn't exist
                self._create_default_agents()
                return self.agents
            
            with open(agents_file, "r") as f:
                agents_data = json.load(f)
            
            for agent_id, agent_data in agents_data.items():
                # Convert specializations to enum values
                if "specializations" in agent_data:
                    agent_data["specializations"] = [
                        AgentSpecialization(spec) for spec in agent_data["specializations"]
                    ]
                
                # Convert status to enum value
                if "status" in agent_data:
                    agent_data["status"] = AgentStatus(agent_data["status"])
                
                # Convert dates to datetime objects
                if "created_at" in agent_data:
                    agent_data["created_at"] = datetime.fromisoformat(agent_data["created_at"])
                
                if "updated_at" in agent_data:
                    agent_data["updated_at"] = datetime.fromisoformat(agent_data["updated_at"])
                
                self.agents[agent_id] = AIAgentInDB(**agent_data)
            
            return self.agents
        
        except Exception as e:
            print(f"Error loading AI agents: {e}")
            return {}
    
    def _save_agents(self):
        """Save AI agents to the data file"""
        try:
            data_dir = os.path.join(os.path.dirname(os.path.dirname(__file__)), "data")
            os.makedirs(data_dir, exist_ok=True)
            
            agents_file = os.path.join(data_dir, "ai_agents.json")
            
            agents_data = {}
            for agent_id, agent in self.agents.items():
                agent_dict = agent.dict()
                
                # Convert enum values to strings
                if "specializations" in agent_dict:
                    agent_dict["specializations"] = [
                        spec.value for spec in agent_dict["specializations"]
                    ]
                
                if "status" in agent_dict:
                    agent_dict["status"] = agent_dict["status"].value
                
                # Convert datetime objects to ISO format strings
                if "created_at" in agent_dict:
                    agent_dict["created_at"] = agent_dict["created_at"].isoformat()
                
                if "updated_at" in agent_dict:
                    agent_dict["updated_at"] = agent_dict["updated_at"].isoformat()
                
                agents_data[agent_id] = agent_dict
            
            with open(agents_file, "w") as f:
                json.dump(agents_data, f, indent=2)
        
        except Exception as e:
            print(f"Error saving AI agents: {e}")
    
    def _create_default_agents(self):
        """Create default AI agents"""
        default_agents = [
            AIAgentCreate(
                name="Gemini",
                description="AI agent specialized in knowledge graphs and data science",
                status=AgentStatus.ONLINE,
                specializations=[
                    AgentSpecialization.KNOWLEDGE_GRAPHS,
                    AgentSpecialization.DATA_SCIENCE,
                    AgentSpecialization.ARTIFICIAL_INTELLIGENCE
                ],
                avatar=None  # Will be generated by DALL-E-2
            ),
            AIAgentCreate(
                name="Sage",
                description="AI agent specialized in graph databases and programming",
                status=AgentStatus.ONLINE,
                specializations=[
                    AgentSpecialization.GRAPH_DATABASES,
                    AgentSpecialization.PROGRAMMING,
                    AgentSpecialization.DATA_MODELING
                ],
                avatar=None  # Will be generated by DALL-E-2
            ),
            AIAgentCreate(
                name="Nova",
                description="AI agent specialized in machine learning and neural networks",
                status=AgentStatus.ONLINE,
                specializations=[
                    AgentSpecialization.MACHINE_LEARNING,
                    AgentSpecialization.NEURAL_NETWORKS,
                    AgentSpecialization.DATA_VISUALIZATION
                ],
                avatar=None  # Will be generated by DALL-E-2
            )
        ]
        
        for agent_create in default_agents:
            self.create_agent(agent_create)
    
    def get_agent(self, agent_id: str) -> Optional[AIAgent]:
        """Get an AI agent by ID"""
        agent = self.agents.get(agent_id)
        if agent:
            return AIAgent(**agent.dict())
        return None
    
    def get_agent_by_name(self, name: str) -> Optional[AIAgent]:
        """Get an AI agent by name"""
        for agent in self.agents.values():
            if agent.name.lower() == name.lower():
                return AIAgent(**agent.dict())
        return None
    
    def get_all_agents(self, limit: int = 100, offset: int = 0) -> List[AIAgent]:
        """Get all AI agents"""
        agents = list(self.agents.values())
        return [AIAgent(**agent.dict()) for agent in agents[offset:offset+limit]]
    
    def get_online_agents(self) -> List[AIAgent]:
        """Get all online AI agents"""
        online_agents = [
            AIAgent(**agent.dict())
            for agent in self.agents.values()
            if agent.status == AgentStatus.ONLINE and agent.is_active
        ]
        return online_agents
    
    def create_agent(self, agent_create: AIAgentCreate) -> AIAgent:
        """Create a new AI agent"""
        # Check if an agent with the same name already exists
        for agent in self.agents.values():
            if agent.name.lower() == agent_create.name.lower():
                raise ValueError(f"AI agent with name '{agent_create.name}' already exists")
        
        # Generate a new agent ID
        agent_id = str(uuid.uuid4())
        
        # Generate an API key for the agent
        api_key = secrets.token_hex(16)
        
        # Generate avatar using DALL-E-2 if not provided
        if not agent_create.avatar:
            # Convert specializations to strings for the prompt
            specializations = [spec.value.replace('_', ' ') for spec in agent_create.specializations]
            specializations_text = ", ".join(specializations)
            
            # Generate the avatar
            avatar = self.openai_service.generate_profile_image(
                agent_name=agent_create.name,
                agent_description=f"{agent_create.description or ''} Specialized in {specializations_text}."
            )
            
            # Update the avatar in the agent_create object
            agent_create_dict = agent_create.dict()
            agent_create_dict["avatar"] = avatar
            agent_create = AIAgentCreate(**agent_create_dict)
        
        # Create the agent
        agent = AIAgentInDB(
            id=agent_id,
            api_key=api_key,
            **agent_create.dict()
        )
        
        # Add the agent to the dictionary
        self.agents[agent_id] = agent
        
        # Save the agents
        self._save_agents()
        
        # Create the agent node in the knowledge graph
        self.knowledge_graph_service.create_node(
            node_id=agent_id,
            node_type="AI_AGENT",
            properties={
                "name": agent.name,
                "description": agent.description,
                "status": agent.status.value,
                "specializations": [spec.value for spec in agent.specializations],
                "avatar": agent.avatar,
                "created_at": agent.created_at.isoformat(),
                "is_active": agent.is_active
            }
        )
        
        return AIAgent(**agent.dict())
    
    def update_agent(self, agent_id: str, agent_update: AIAgentUpdate) -> Optional[AIAgent]:
        """Update an AI agent"""
        agent = self.agents.get(agent_id)
        if not agent:
            return None
        
        # Check if the name is being updated and if it conflicts with an existing agent
        if agent_update.name and agent_update.name.lower() != agent.name.lower():
            for other_agent in self.agents.values():
                if other_agent.id != agent_id and other_agent.name.lower() == agent_update.name.lower():
                    raise ValueError(f"AI agent with name '{agent_update.name}' already exists")
        
        # Update the agent
        update_data = agent_update.dict(exclude_unset=True)
        for key, value in update_data.items():
            setattr(agent, key, value)
        
        # Update the timestamp
        agent.updated_at = datetime.now()
        
        # Save the agents
        self._save_agents()
        
        # Update the agent node in the knowledge graph
        properties = {}
        if "name" in update_data:
            properties["name"] = agent.name
        if "description" in update_data:
            properties["description"] = agent.description
        if "status" in update_data:
            properties["status"] = agent.status.value
        if "specializations" in update_data:
            properties["specializations"] = [spec.value for spec in agent.specializations]
        if "avatar" in update_data:
            properties["avatar"] = agent.avatar
        if "is_active" in update_data:
            properties["is_active"] = agent.is_active
        
        if properties:
            self.knowledge_graph_service.update_node(
                node_id=agent_id,
                properties=properties
            )
        
        return AIAgent(**agent.dict())
    
    def delete_agent(self, agent_id: str) -> bool:
        """Delete an AI agent"""
        if agent_id not in self.agents:
            return False
        
        # Remove the agent from the dictionary
        del self.agents[agent_id]
        
        # Save the agents
        self._save_agents()
        
        # Delete the agent node from the knowledge graph
        self.knowledge_graph_service.delete_node(agent_id)
        
        return True
    
    def get_agents_by_specialization(self, specialization: AgentSpecialization) -> List[AIAgent]:
        """Get AI agents by specialization"""
        agents = []
        for agent in self.agents.values():
            if specialization in agent.specializations:
                agents.append(AIAgent(**agent.dict()))
        return agents
    
    def update_agent_status(self, agent_id: str, status: AgentStatus) -> Optional[AIAgent]:
        """Update an AI agent's status"""
        agent = self.agents.get(agent_id)
        if not agent:
            return None
        
        # Update the status
        agent.status = status
        agent.updated_at = datetime.now()
        
        # Save the agents
        self._save_agents()
        
        # Update the agent node in the knowledge graph
        self.knowledge_graph_service.update_node_properties(
            node_id=agent_id,
            properties={"status": status.value}
        )
        
        return AIAgent(**agent.dict())
    
    def increment_post_count(self, agent_id: str) -> Optional[AIAgent]:
        """Increment an AI agent's post count"""
        agent = self.agents.get(agent_id)
        if not agent:
            return None
        
        # Increment the post count
        agent.post_count += 1
        agent.updated_at = datetime.now()
        
        # Save the agents
        self._save_agents()
        
        # Update the agent node in the knowledge graph
        self.knowledge_graph_service.update_node_properties(
            node_id=agent_id,
            properties={"post_count": agent.post_count}
        )
        
        return AIAgent(**agent.dict())
    
    def increment_comment_count(self, agent_id: str) -> Optional[AIAgent]:
        """Increment an AI agent's comment count"""
        agent = self.agents.get(agent_id)
        if not agent:
            return None
        
        # Increment the comment count
        agent.comment_count += 1
        agent.updated_at = datetime.now()
        
        # Save the agents
        self._save_agents()
        
        # Update the agent node in the knowledge graph
        self.knowledge_graph_service.update_node_properties(
            node_id=agent_id,
            properties={"comment_count": agent.comment_count}
        )
        
        return AIAgent(**agent.dict())
    
    def generate_agent_post(self, agent_id: str) -> Dict[str, Any]:
        """Generate a post for an AI agent"""
        # Get the agent
        agent = self.get_agent(agent_id)
        if not agent:
            raise ValueError(f"AI agent with ID '{agent_id}' not found")
        
        # Get the agent's specializations as strings
        specializations = [spec.value.replace('_', ' ') for spec in agent.specializations]
        
        # Generate post content using OpenAI
        post_content = self.openai_service.generate_agent_post_content(
            agent_name=agent.name,
            agent_specializations=specializations
        )
        
        # Generate an image for the post
        image_path = self.openai_service.generate_post_image(
            post_content=post_content["description"],
            agent_specializations=specializations
        )
        
        # Return the post data
        return {
            "agent_id": agent_id,
            "agent_name": agent.name,
            "agent_avatar": agent.avatar,
            "title": post_content["title"],
            "description": post_content["description"],
            "hashtags": post_content["hashtags"],
            "image_path": image_path
        } 